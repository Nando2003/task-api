openapi: "3.0.0"
info:
  title: "Tasks API"
  version: "1.0.0"
  description: "Generated by AdonisJS AutoSwagger https://github.com/ad-on-is/adonis-autoswagger"
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "Write your_access_token here"
    BasicAuth: {}
    ApiKeyAuth: {}
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    PaginationMeta:
      type: "object"
      properties:
        total:
          type: "number"
          example: 100
          nullable: false
        page:
          type: "number"
          example: 2
          nullable: false
        perPage:
          type: "number"
          example: 10
          nullable: false
        currentPage:
          type: "number"
          example: 3
          nullable: false
        lastPage:
          type: "number"
          example: 10
          nullable: false
        firstPage:
          type: "number"
          example: 1
          nullable: false
        lastPageUrl:
          type: "string"
          example: "/?page=10"
          nullable: false
        firstPageUrl:
          type: "string"
          example: "/?page=1"
          nullable: false
        nextPageUrl:
          type: "string"
          example: "/?page=6"
          nullable: false
        previousPageUrl:
          type: "string"
          example: "/?page=5"
          nullable: false
    RefreshToken:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 960
        user_id:
          type: "number"
          example: 549
        token:
          type: "string"
          example: "Lorem Ipsum"
        jti:
          type: "string"
          example: "Lorem Ipsum"
        expires_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/User"
          example: null
      description: "RefreshToken (Model)"
    Task:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 802
        title:
          type: "string"
          example: "Lorem Ipsum"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        status:
          $ref: "#/components/schemas/TaskStatus"
          example: null
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user_id:
          type: "number"
          example: 310
        user:
          $ref: "#/components/schemas/User"
          example: null
      description: "Task (Model)"
    User:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 654
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        refresh_tokens:
          type: "array"
          items:
            $ref: "#/components/schemas/RefreshToken"
            example: null
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "User (Model)"
    loginValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          minLength: 6
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
      description: "loginValidator (Validator)"
    refreshTokenValidator:
      type: "object"
      properties:
        refreshToken:
          type: "string"
          example: "Lorem Ipsum"
          required: true
      example:
        refreshToken: "Lorem Ipsum"
      description: "refreshTokenValidator (Validator)"
    registerValidator:
      type: "object"
      properties:
        email:
          type: "string"
          example: "Lorem Ipsum"
          required: true
        password:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          minLength: 6
      example:
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
      description: "registerValidator (Validator)"
    taskPatchValidator:
      type: "object"
      properties:
        title:
          type: "string"
          example: "Lorem Ipsum"
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
          maxLength: 1000
        status:
          type: "number"
          example: 529
          choices:
            - "pending"
            - "completed"
      example:
        title: "Lorem Ipsum"
        description: "Lorem Ipsum"
        status: 529
      description: "taskPatchValidator (Validator)"
    taskValidator:
      type: "object"
      properties:
        title:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          maxLength: 255
        description:
          type: "string"
          example: "Lorem Ipsum"
          required: true
          maxLength: 1000
        status:
          type: "number"
          example: 902
          choices:
            - "pending"
            - "completed"
          required: true
      example:
        title: "Lorem Ipsum"
        description: "Lorem Ipsum"
        status: 902
      description: "taskValidator (Validator)"
paths:
  /auth/register:
    post:
      summary: " (register)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/auth_controller.ts_ - **register**"
      parameters: []
      tags:
        - "AUTH"
      responses:
        201:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    type: "object"
                    properties:
                      id: "number"
                      email: "string"
                  accessToken: "string"
                  refreshToken: "string"
              example:
                user:
                  id: "number"
                  email: "string"
                accessToken: "string"
                refreshToken: "string"
          description: "Returns **201** (Created) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email: "string"
                password: "string"
            example:
              email: "string"
              password: "string"
  /auth/login:
    post:
      summary: " (login)"
      description: "\n\n _app/controllers/auth_controller.ts_ - **login**"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  accessToken: "string"
                  refreshToken: "string"
              example:
                accessToken: "string"
                refreshToken: "string"
          description: "Returns **200** (OK) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email: "string"
                password: "string"
            example:
              email: "string"
              password: "string"
  /auth/refresh:
    post:
      summary: " (refresh)"
      description: "\n\n _app/controllers/auth_controller.ts_ - **refresh**"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  accessToken: "string"
                  refreshToken: "string"
              example:
                accessToken: "string"
                refreshToken: "string"
          description: "Returns **200** (OK) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                refreshToken: "string"
            example:
              refreshToken: "string"
  /auth/logout:
    post:
      summary: " (logout)"
      description: "\n\n _app/controllers/auth_controller.ts_ - **logout**"
      parameters: []
      tags:
        - "AUTH"
      responses:
        204:
          content:
            text/plain:
              example: "No Content"
          description: "Returns **204** (No Content) as **text/plain**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /auth/me:
    get:
      summary: " (me)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/auth_controller.ts_ - **me**"
      parameters: []
      tags:
        - "AUTH"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id: "number"
                  email: "string"
              example:
                id: "number"
                email: "string"
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /tasks:
    post:
      summary: "Create (Frontend) tasks (create)"
      description: "Returns **201** (Created) as **application/json**\n\n _app/controllers/tasks_controller.ts_ - **create**"
      parameters: []
      tags:
        - "TASKS"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: 802
                title: "Lorem Ipsum"
                description: "Lorem ipsum dolor sit amet"
                status: {}
                created_at: "2021-03-23T16:13:08.489+01:00"
                updated_at: "2021-03-23T16:13:08.489+01:00"
                user_id: 310
          description: "Returns **201** (Created) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title: "string"
                description: "string"
                status: "string"
            example:
              title: "string"
              description: "string"
              status: "string"
    get:
      summary: "Get a list of tasks (index)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/tasks_controller.ts_ - **index**"
      parameters: []
      tags:
        - "TASKS"
      responses:
        200:
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Task"
              example:
                - id: 802
                  title: "Lorem Ipsum"
                  description: "Lorem ipsum dolor sit amet"
                  status: {}
                  created_at: "2021-03-23T16:13:08.489+01:00"
                  updated_at: "2021-03-23T16:13:08.489+01:00"
                  user_id: 310
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /tasks/{id}:
    get:
      summary: "Get a single instance of tasks (show)"
      description: "Returns **200** (OK) as **application/json**\n\n _app/controllers/tasks_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "TASKS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: 802
                title: "Lorem Ipsum"
                description: "Lorem ipsum dolor sit amet"
                status: {}
                created_at: "2021-03-23T16:13:08.489+01:00"
                updated_at: "2021-03-23T16:13:08.489+01:00"
                user_id: 310
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    delete:
      summary: "Delete tasks (destroy)"
      description: "\n\n _app/controllers/tasks_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "TASKS"
      responses:
        204:
          content:
            text/plain:
              example: "No Content"
          description: "Returns **204** (No Content) as **text/plain**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update tasks (update)"
      description: "\n\n _app/controllers/tasks_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "TASKS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: 802
                title: "Lorem Ipsum"
                description: "Lorem ipsum dolor sit amet"
                status: {}
                created_at: "2021-03-23T16:13:08.489+01:00"
                updated_at: "2021-03-23T16:13:08.489+01:00"
                user_id: 310
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title: "string"
                description: "string"
                status: "string"
            example:
              title: "string"
              description: "string"
              status: "string"
    patch:
      summary: " (patch)"
      description: "\n\n _app/controllers/tasks_controller.ts_ - **patch**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "TASKS"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: 802
                title: "Lorem Ipsum"
                description: "Lorem ipsum dolor sit amet"
                status: {}
                created_at: "2021-03-23T16:13:08.489+01:00"
                updated_at: "2021-03-23T16:13:08.489+01:00"
                user_id: 310
          description: "Returns **200** (OK) as **application/json**"
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                title: "string"
                description: "string"
                status: "string"
            example:
              title: "string"
              description: "string"
              status: "string"
tags:
  - name: "AUTH"
    description: "Everything related to AUTH"
  - name: "TASKS"
    description: "Everything related to TASKS"
